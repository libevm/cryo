use crate::*;
use ethers::abi::{decode, ParamType};
use ethers::prelude::*;
use ethers::utils::hex;
use ethers_core::utils::format_ether;
use polars::prelude::*;
use std::collections::HashMap;

// https://github.com/libevm/eth_call_abuser
const PRICE_QUERY_CALLDATA: &str = "608060405234801561001057600080fd5b50600061004b7388e6a0c2ddd26feeb64f039a2c41296fcb3f564073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26101ce60201b60201c565b9050600061008773c63b0708e2f7e69cb8a1df0e1389a98c35a76d5273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486101ce60201b60201c565b90506000670de0b6b3a764000082846100a09190610a82565b6100aa9190610af3565b90506000836100e7734e68ccd3e89f51c3074ca5072bbac773960dfa3673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26101ce60201b60201c565b61011f7360594a405d53811d3bc4766596efd80fd545a27073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26101ce60201b60201c565b61015773cbcdf9626bc03e24f779434178a73a0b4bad62ed73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26101ce60201b60201c565b610198733fd4cf9303c4bc9e13772618828712c8eac7dd2f73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2670de0b6b3a764000061057360201b60201c565b866040516020016101ae96959493929190610b33565b604051602081830303815290604052905060008190506020810180590381f35b60006101df836108db60201b60201c565b6101ec576001905061056d565b600083905060008173ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa15801561023e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102629190610cc9565b50505050505090506401000276a473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161115806102ea575073fffd8963efd1fc6a506488495d951d5263988d2573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1610155b156102fa5760019250505061056d565b60008273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610da9565b905060008373ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610da9565b905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190610e02565b905060008273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610e02565b905060006104d886846108ee60201b60201c565b90508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361053f5781601261051a9190610e2f565b600a6105269190610f96565b816105319190610a82565b97505050505050505061056d565b8082601261054d9190610fe1565b600a6105599190610f96565b6105639190610af3565b9750505050505050505b92915050565b6000610584846108db60201b60201c565b61059157600190506108d4565b600084905060008173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190610da9565b905060008273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a9190610da9565b90506000808473ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190611097565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff16915060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107849190610e02565b905060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f79190610e02565b90508473ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff16036108825780600a6108399190610f96565b846108449190610a82565b935081600a6108539190610f96565b83858b6108609190610a82565b61086a9190610af3565b6108749190610af3565b9750505050505050506108d4565b81600a61088f9190610f96565b8361089a9190610a82565b925080600a6108a99190610f96565b84848b6108b69190610a82565b6108c09190610af3565b6108ca9190610af3565b9750505050505050505b9392505050565b600080823b905060008111915050919050565b6000808373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff166109299190610a82565b9050600083600a61093a91906110ea565b90506109668282780100000000000000000000000000000000000000000000000061097060201b60201c565b9250505092915050565b60008060008019858709858702925082811083820303915050600081036109aa576000841161099e57600080fd5b83820492505050610a42565b8084116109b657600080fd5b600084868809905082811182039150808303925060008586600003169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a8d82610a49565b9150610a9883610a49565b9250828202610aa681610a49565b91508282048414831517610abd57610abc610a53565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610afe82610a49565b9150610b0983610a49565b925082610b1957610b18610ac4565b5b828204905092915050565b610b2d81610a49565b82525050565b600060c082019050610b486000830189610b24565b610b556020830188610b24565b610b626040830187610b24565b610b6f6060830186610b24565b610b7c6080830185610b24565b610b8960a0830184610b24565b979650505050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610bc281610b99565b8114610bcd57600080fd5b50565b600081519050610bdf81610bb9565b92915050565b60008160020b9050919050565b610bfb81610be5565b8114610c0657600080fd5b50565b600081519050610c1881610bf2565b92915050565b600061ffff82169050919050565b610c3581610c1e565b8114610c4057600080fd5b50565b600081519050610c5281610c2c565b92915050565b600060ff82169050919050565b610c6e81610c58565b8114610c7957600080fd5b50565b600081519050610c8b81610c65565b92915050565b60008115159050919050565b610ca681610c91565b8114610cb157600080fd5b50565b600081519050610cc381610c9d565b92915050565b600080600080600080600060e0888a031215610ce857610ce7610b94565b5b6000610cf68a828b01610bd0565b9750506020610d078a828b01610c09565b9650506040610d188a828b01610c43565b9550506060610d298a828b01610c43565b9450506080610d3a8a828b01610c43565b93505060a0610d4b8a828b01610c7c565b92505060c0610d5c8a828b01610cb4565b91505092959891949750929550565b6000610d7682610b99565b9050919050565b610d8681610d6b565b8114610d9157600080fd5b50565b600081519050610da381610d7d565b92915050565b600060208284031215610dbf57610dbe610b94565b5b6000610dcd84828501610d94565b91505092915050565b610ddf81610a49565b8114610dea57600080fd5b50565b600081519050610dfc81610dd6565b92915050565b600060208284031215610e1857610e17610b94565b5b6000610e2684828501610ded565b91505092915050565b6000610e3a82610a49565b9150610e4583610a49565b9250828203905081811115610e5d57610e5c610a53565b5b92915050565b60008160011c9050919050565b6000808291508390505b6001851115610eba57808604811115610e9657610e95610a53565b5b6001851615610ea55780820291505b8081029050610eb385610e63565b9450610e7a565b94509492505050565b600082610ed35760019050610f8f565b81610ee15760009050610f8f565b8160018114610ef75760028114610f0157610f30565b6001915050610f8f565b60ff841115610f1357610f12610a53565b5b8360020a915084821115610f2a57610f29610a53565b5b50610f8f565b5060208310610133831016604e8410600b8410161715610f655782820a905083811115610f6057610f5f610a53565b5b610f8f565b610f728484846001610e70565b92509050818404811115610f8957610f88610a53565b5b81810290505b9392505050565b6000610fa182610a49565b9150610fac83610a49565b9250610fd97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610ec3565b905092915050565b6000610fec82610a49565b9150610ff783610a49565b925082820190508082111561100f5761100e610a53565b5b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b61103881611015565b811461104357600080fd5b50565b6000815190506110558161102f565b92915050565b600063ffffffff82169050919050565b6110748161105b565b811461107f57600080fd5b50565b6000815190506110918161106b565b92915050565b6000806000606084860312156110b0576110af610b94565b5b60006110be86828701611046565b93505060206110cf86828701611046565b92505060406110e086828701611082565b9150509250925092565b60006110f582610a49565b915061110083610c58565b925061112d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610ec3565b90509291505056fe";

/// Columns for prices
#[cryo_to_df::to_df(Datatype::Prices)]
#[derive(Default)]
pub struct Prices {
    n_rows: usize,

    block_number: Vec<u32>,

    weth_usdc: Vec<f64>,
    weth_usdt: Vec<f64>,
    weth_dai: Vec<f64>,
    weth_wbtc: Vec<f64>,
    weth_bnt: Vec<f64>,
    weth_frax: Vec<f64>,

    chain_id: Vec<u64>,
}

#[async_trait::async_trait]
impl Dataset for Prices {
    fn name() -> &'static str {
        "prices"
    }

    fn default_sort() -> Vec<String> {
        vec!["block_number".to_string()]
    }

    fn default_blocks() -> Option<String> {
        Some("latest".to_string())
    }
}

type Result<T> = ::core::result::Result<T, CollectError>;
type BlockPrices = (u32, Vec<f64>);

#[async_trait::async_trait]
impl CollectByBlock for Prices {
    type Response = BlockPrices;

    async fn extract(
        request: Params,
        source: Arc<Source>,
        _schemas: Schemas,
    ) -> Result<Self::Response> {
        let block_number = request.block_number()? as u32;

        let call_data: Vec<u8> = hex::decode(PRICE_QUERY_CALLDATA).unwrap();
        let transaction =
            TransactionRequest { data: Some(call_data.clone().into()), ..Default::default() };

        let output = source.fetcher.call(transaction, block_number.into()).await?;
        let resp: Vec<f64> = decode(
            &[
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
            ],
            &output,
        )
        .unwrap()
        .iter()
        .map(|x| format_ether(x.clone().into_uint().unwrap()).parse::<f64>().unwrap())
        .collect();

        Ok((block_number, resp))
    }

    fn transform(response: Self::Response, columns: &mut Self, schemas: &Schemas) -> Result<()> {
        let schema = schemas.get(&Datatype::Prices).ok_or(err("schema not provided"))?;
        process_prices(columns, response, schema)
    }
}

#[async_trait::async_trait]
impl CollectByTransaction for Prices {
    type Response = ();
}

fn process_prices(columns: &mut Prices, data: BlockPrices, schema: &Table) -> Result<()> {
    let (block, prices) = data;
    columns.n_rows += 1;
    store!(schema, columns, block_number, block);
    store!(schema, columns, weth_usdc, prices[0]);
    store!(schema, columns, weth_usdt, prices[1]);
    store!(schema, columns, weth_dai, prices[2]);
    store!(schema, columns, weth_wbtc, prices[3]);
    store!(schema, columns, weth_bnt, prices[4]);
    store!(schema, columns, weth_frax, prices[5]);

    Ok(())
}