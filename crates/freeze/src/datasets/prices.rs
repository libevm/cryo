use crate::*;
use ethers::abi::{decode, ParamType};
use ethers::prelude::*;
use ethers::utils::hex;
use ethers_core::utils::format_ether;
use polars::prelude::*;
use std::collections::HashMap;

// https://github.com/libevm/eth_call_abuser
const PRICE_QUERY_CALLDATA: &str = "";

/// Columns for prices
#[cryo_to_df::to_df(Datatype::Prices)]
#[derive(Default)]
pub struct Prices {
    n_rows: usize,

    block_number: Vec<u32>,

    weth_usdc: Vec<f64>,
    weth_usdt: Vec<f64>,
    weth_dai: Vec<f64>,
    weth_wbtc: Vec<f64>,
    weth_bnt: Vec<f64>,
    weth_frax: Vec<f64>,
    weth_frxeth: Vec<f64>,
    weth_wsteth: Vec<f64>,
    weth_reth: Vec<f64>,

    chain_id: Vec<u64>,
}

#[async_trait::async_trait]
impl Dataset for Prices {
    fn name() -> &'static str {
        "prices"
    }

    fn default_sort() -> Vec<String> {
        vec!["block_number".to_string()]
    }

    fn default_blocks() -> Option<String> {
        Some("latest".to_string())
    }
}

type Result<T> = ::core::result::Result<T, CollectError>;
type BlockPrices = (u32, Vec<f64>);

#[async_trait::async_trait]
impl CollectByBlock for Prices {
    type Response = BlockPrices;

    async fn extract(
        request: Params,
        source: Arc<Source>,
        _schemas: Schemas,
    ) -> Result<Self::Response> {
        let block_number = request.block_number()? as u32;

        let call_data: Vec<u8> = hex::decode(PRICE_QUERY_CALLDATA).unwrap();
        let transaction =
            TransactionRequest { data: Some(call_data.clone().into()), ..Default::default() };

        let output = source.fetcher.call(transaction, block_number.into()).await?;
        let resp: Vec<f64> = decode(
            &[
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
                ParamType::Uint(256),
            ],
            &output,
        )
        .unwrap()
        .iter()
        .map(|x| format_ether(x.clone().into_uint().unwrap()).parse::<f64>().unwrap())
        .collect();

        Ok((block_number, resp))
    }

    fn transform(response: Self::Response, columns: &mut Self, schemas: &Schemas) -> Result<()> {
        let schema = schemas.get(&Datatype::Prices).ok_or(err("schema not provided"))?;
        process_prices(columns, response, schema)
    }
}

#[async_trait::async_trait]
impl CollectByTransaction for Prices {
    type Response = ();
}

fn process_prices(columns: &mut Prices, data: BlockPrices, schema: &Table) -> Result<()> {
    let (block, prices) = data;
    columns.n_rows += 1;
    store!(schema, columns, block_number, block);
    store!(schema, columns, weth_usdc, prices[0]);
    store!(schema, columns, weth_usdt, prices[1]);
    store!(schema, columns, weth_dai, prices[2]);
    store!(schema, columns, weth_wbtc, prices[3]);
    store!(schema, columns, weth_bnt, prices[4]);
    store!(schema, columns, weth_frax, prices[5]);
    store!(schema, columns, weth_frxeth, prices[6]);
    store!(schema, columns, weth_wsteth, prices[7]);
    store!(schema, columns, weth_reth, prices[8]);

    Ok(())
}